<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sławek Gonet</title>
    <link>https://slawekgonet.pl/</link>
    <description>Recent content on Sławek Gonet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 Mar 2020 20:52:03 +0100</lastBuildDate>
    
	<atom:link href="https://slawekgonet.pl/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CNC Router - Part 3: Testing</title>
      <link>https://slawekgonet.pl/posts/cnc-router-p3/</link>
      <pubDate>Sun, 08 Mar 2020 20:52:03 +0100</pubDate>
      
      <guid>https://slawekgonet.pl/posts/cnc-router-p3/</guid>
      <description>Adding &amp;ldquo;backplate&amp;rdquo; reinforcements As expected, so-called backplate was showing too much deflection to be acceptable - quick fix was to add L-sections on both of its sides, preventing bending when loaded. Backplate L-sections reinforcements
Wiring electronics Based on All-metal 3D Printer experiences, single electronics cabinet containing all components is not the best solution. With everything packed so tight cooling is problematic and while maintenance is already difficult, debugging is simply impossible.</description>
    </item>
    
    <item>
      <title>spec-debug</title>
      <link>https://slawekgonet.pl/posts/spec-debug/</link>
      <pubDate>Thu, 05 Mar 2020 23:29:10 +0100</pubDate>
      
      <guid>https://slawekgonet.pl/posts/spec-debug/</guid>
      <description>Debug helper which I&#39;ve been always missing - minimal helper for instrumenting (clojure.spec.alpha/valid?) with more verbose output.
This should be treated as debug facility and not be enabled on production by default - especially, when there are spec/valid? statements expected to fail non-catastrophically used in performace-sensitive parts of code.
Kudos to @github/bhb for expound library which made this little helper possible.
My setup Following profiles.clj configuration:
$ cat .</description>
    </item>
    
    <item>
      <title>burp_exporter</title>
      <link>https://slawekgonet.pl/posts/burp-exporter/</link>
      <pubDate>Tue, 03 Mar 2020 21:12:17 +0100</pubDate>
      
      <guid>https://slawekgonet.pl/posts/burp-exporter/</guid>
      <description>Prometheus exporter for BURP backup program burp written in Python.
burp_exporter operates directly on BURP spool directory thus has to be running on the same machine as server, but does not require complex configuration as a client of monitor protocol.
See burp_exporter on GitHub for more info.</description>
    </item>
    
    <item>
      <title>CNC Router - Part 2: Building hardware</title>
      <link>https://slawekgonet.pl/posts/cnc-router-p2/</link>
      <pubDate>Mon, 06 Jan 2020 21:28:29 +0100</pubDate>
      
      <guid>https://slawekgonet.pl/posts/cnc-router-p2/</guid>
      <description>In previous entry I have described design and decisions behind CNC router. Here I will be describing recent progress, where the majority of hardware has been built.
 Tracing, drilling, tapping Biggest difference in new design as compared to 3D printer is X and Z carriage made from two 4mm thick steel plates. This makes for really simple, fast and what&#39;s most important straight assembly - but only under circumstance that all holes will be drilled precisely at locations.</description>
    </item>
    
    <item>
      <title>CNC Router - Part 1: Design</title>
      <link>https://slawekgonet.pl/posts/cnc-router-p1/</link>
      <pubDate>Wed, 25 Dec 2019 22:33:38 +0100</pubDate>
      
      <guid>https://slawekgonet.pl/posts/cnc-router-p1/</guid>
      <description>Design of lightweight CNC router rebuilt from all-metal 3D Printer.
 Design Major design criteria for CNC router were directly influenced by lessons learned from All-metal 3D Printer
 FDM printer are slow, it&#39;s worth sacrificing Z travel for additional rigidity. Use single motor for each axis to guarantee squareness after homing. As this is still research slash fun project, keep costs low by reusing as many parts as possible. Keep it manufacture-able with tools I have, but try limiting places where it will require tuning.</description>
    </item>
    
    <item>
      <title>clj-grpc</title>
      <link>https://slawekgonet.pl/posts/clj-grpc/</link>
      <pubDate>Thu, 14 Nov 2019 23:29:10 +0100</pubDate>
      
      <guid>https://slawekgonet.pl/posts/clj-grpc/</guid>
      <description>When it comes to gRPC in Clojure, there is (what seem like) great library clojusc/protobuf. Unfortunately, for someone without any past gRPC experience, it has quite steep learning curve as it&#39;s difficult to relate it directly to official Java documenation available on https://grpc.io.
I have created clj-grpc partly as a gRPC learning exercise, but mainly to use it in one of our projects in Emergynt. I tried not to reinvent any wheels in process, but just provide hassle-free experience without unnecessary Java interop while strongly reassembling workflow from well documented Java bindings.</description>
    </item>
    
    <item>
      <title>liberator-swagger</title>
      <link>https://slawekgonet.pl/posts/liberator-swagger/</link>
      <pubDate>Mon, 08 Jul 2019 23:39:10 +0200</pubDate>
      
      <guid>https://slawekgonet.pl/posts/liberator-swagger/</guid>
      <description>Swagger become de-facto standard for REST API documentation, so it was obvious choice for describing liberator resources I was exposing in one of Emergynt projects. There is awesome metosin/spec-tools library enabling generation of Swagger definitions from Spec.
It seemed like good fit to merge liberator with spec-tools:
 Documentation is written where inside resource definition, keeping code well organized and easy to understand. Various handlers, like handle-not-found or handle-malformed can be generated automatically for meaningful error messages.</description>
    </item>
    
    <item>
      <title>Tour-throw for Rottefella Chili</title>
      <link>https://slawekgonet.pl/posts/rottefella-chili-tour-throw/</link>
      <pubDate>Mon, 18 Feb 2019 22:14:25 +0100</pubDate>
      
      <guid>https://slawekgonet.pl/posts/rottefella-chili-tour-throw/</guid>
      <description>Tour-throw is common name for simple way of loosening spring tension in telemark ski bindings, especially useful for long tours over flat terrains.
Soon after publishing replacement tour-throw heel levers for my G3 Targa Telemark Bindings on Thingiverse I&#39;ve been asked to design and manufacture similar part to Rottefella Chili bindings, which do not come with such feature out of the box.
Test part
By coincidence, I&#39;ve been temporarily in possession of the exact binding model client was asking for, so there was no back-and-forth shipping required.</description>
    </item>
    
    <item>
      <title>All-metal 3D Printer</title>
      <link>https://slawekgonet.pl/posts/all-metal-3d-printer/</link>
      <pubDate>Sun, 11 Nov 2018 10:30:10 +0100</pubDate>
      
      <guid>https://slawekgonet.pl/posts/all-metal-3d-printer/</guid>
      <description>Back in 2017 there were no cheap-and-good 3D printer readily available on the market. Basically all that was available were budget Prusa clones, but neither rigid nor especially cheap. That&#39;s why I started designing my own construction of heavy-weight all-metal FDM 3D printer with some lightweight CNC routing in mind.
As it turned out, it was rather nice 3D printer but not very practical CNC router.
NOTE: This is post-factum description of historical project, so it&#39;s already known how it turned out.</description>
    </item>
    
    <item>
      <title>clj-systemd</title>
      <link>https://slawekgonet.pl/posts/clj-systemd/</link>
      <pubDate>Mon, 06 Aug 2018 23:29:10 +0200</pubDate>
      
      <guid>https://slawekgonet.pl/posts/clj-systemd/</guid>
      <description>Simple wrapper on top of thjomnx/java-systemd for Clojure, only partially completed.
See clj-systemd on GitHub for more info.</description>
    </item>
    
  </channel>
</rss>